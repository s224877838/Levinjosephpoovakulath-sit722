name: CI/CD Pipeline for SIT722

on:
  push:
    branches:
      - testing  # Trigger on push to testing branch
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Manual trigger option

jobs:
  # Stage 1: CI pipeline - build, test, and push Docker images
  ci-pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up Azure CLI
        uses: azure/cli@v1

      - name: Log in to Azure and ACR
        run: |
          echo '${{ secrets.AZURE_CREDENTIALS }}' > azure_credentials.json
          az login --service-principal \
            -u $(jq -r .clientId azure_credentials.json) \
            -p $(jq -r .clientSecret azure_credentials.json) \
            --tenant $(jq -r .tenantId azure_credentials.json)
          az acr login --name ${{ secrets.ACR_NAME }}

      - name: Build Docker images and push to ACR
        run: |
          docker buildx build --file Dockerfile.product_service --tag ${{ secrets.ACR_NAME }}.azurecr.io/product_service:latest --push .
          docker buildx build --file Dockerfile.order_service --tag ${{ secrets.ACR_NAME }}.azurecr.io/order_service:latest --push .
          docker buildx build --file Dockerfile.frontend --tag ${{ secrets.ACR_NAME }}.azurecr.io/frontend:latest --push .

      - name: Run tests for Product Service
        run: docker run --rm ${{ secrets.ACR_NAME }}.azurecr.io/product_service:latest pytest --maxfail=5 --disable-warnings -q

      - name: Run tests for Order Service
        run: docker run --rm ${{ secrets.ACR_NAME }}.azurecr.io/order_service:latest pytest --maxfail=5 --disable-warnings -q

      - name: Run tests for Frontend Service
        run: docker run --rm ${{ secrets.ACR_NAME }}.azurecr.io/frontend:latest pytest --maxfail=5 --disable-warnings -q

      - name: Trigger Staging Deployment
        if: success()
        run: echo "Tests passed! Triggering staging deployment."

  # Stage 2: Staging deployment and testing
  staging-deployment:
    needs: ci-pipeline
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Set up Azure CLI
        uses: azure/cli@v1

      - name: Log in to Azure and AKS
        run: |
          echo '${{ secrets.AZURE_CREDENTIALS }}' > azure_credentials.json
          az login --service-principal \
            -u $(jq -r .clientId azure_credentials.json) \
            -p $(jq -r .clientSecret azure_credentials.json) \
            --tenant $(jq -r .tenantId azure_credentials.json)
          az aks get-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Deploy to Staging Environment
        run: kubectl apply -f k8s/

      - name: Wait for Deployment rollout
        run: |
          kubectl rollout status deployment/product-service-w08e1
          kubectl rollout status deployment/order-service-w08e1
          kubectl rollout status deployment/frontend

      - name: Run acceptance tests on Staging Environment
        run: echo "Running acceptance tests on staging..."

      - name: Clean up Staging Environment
        run: kubectl delete -f k8s/

  # Stage 3: Production Deployment on merge to main
  production-deployment:
    needs: staging-deployment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Set up Azure CLI
        uses: azure/cli@v1

      - name: Log in to Azure and AKS for Production
        run: |
          echo '${{ secrets.AZURE_CREDENTIALS }}' > azure_credentials.json
          az login --service-principal \
            -u $(jq -r .clientId azure_credentials.json) \
            -p $(jq -r .clientSecret azure_credentials.json) \
            --tenant $(jq -r .tenantId azure_credentials.json)
          az aks get-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Deploy to Production Environment
        run: kubectl apply -f k8s/
