name: CI/CD Pipeline for SIT722

on:
  push:
    branches:
      - testing
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  ci-pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Azure Login and ACR Login
        run: |
          echo '${{ secrets.AZURE_CREDENTIALS }}' > azure_credentials.json

          az login --service-principal \
            -u $(jq -r .clientId azure_credentials.json) \
            -p $(jq -r .clientSecret azure_credentials.json) \
            --tenant $(jq -r .tenantId azure_credentials.json)

          az acr login --name ${{ secrets.ACR_NAME }}

      - name: Build Docker images and push to ACR
        run: |
          docker buildx build --file week08/backend/product_service/Dockerfile \
            --tag ${{ secrets.ACR_NAME }}.azurecr.io/product_service:latest \
            --push week08/backend/product_service

          docker buildx build --file week08/backend/order_service/Dockerfile \
            --tag ${{ secrets.ACR_NAME }}.azurecr.io/order_service:latest \
            --push week08/backend/order_service

          docker buildx build --file week08/frontend/Dockerfile \
            --tag ${{ secrets.ACR_NAME }}.azurecr.io/frontend:latest \
            --push week08/frontend

      - name: Run tests for Product Service
        run: |
          docker run --rm ${{ secrets.ACR_NAME }}.azurecr.io/product_service:latest pytest --maxfail=5 --disable-warnings -q

      - name: Run tests for Order Service
        run: |
          docker run --rm ${{ secrets.ACR_NAME }}.azurecr.io/order_service:latest pytest --maxfail=5 --disable-warnings -q

      - name: Run tests for Frontend Service
        run: |
          docker run --rm ${{ secrets.ACR_NAME }}.azurecr.io/frontend:latest pytest --maxfail=5 --disable-warnings -q

  staging-deployment:
    needs: ci-pipeline
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Azure Login and AKS Credentials
        run: |
          echo '${{ secrets.AZURE_CREDENTIALS }}' > azure_credentials.json

          az login --service-principal \
            -u $(jq -r .clientId azure_credentials.json) \
            -p $(jq -r .clientSecret azure_credentials.json) \
            --tenant $(jq -r .tenantId azure_credentials.json)

          az aks get-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Deploy to Staging
        run: |
          kubectl apply -f k8s/

      - name: Wait for Deployments
        run: |
          kubectl rollout status deployment/product-service-w08e1
          kubectl rollout status deployment/order-service-w08e1
          kubectl rollout status deployment/frontend

      - name: Run Acceptance Tests
        run: echo "Running staging tests..."

      - name: Clean up Staging
        run: kubectl delete -f k8s/

  production-deployment:
    needs: staging-deployment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Azure Login and AKS Credentials
        run: |
          echo '${{ secrets.AZURE_CREDENTIALS }}' > azure_credentials.json

          az login --service-principal \
            -u $(jq -r .clientId azure_credentials.json) \
            -p $(jq -r .clientSecret azure_credentials.json) \
            --tenant $(jq -r .tenantId azure_credentials.json)

          az aks get-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Deploy to Production
        run: kubectl apply -f k8s/
