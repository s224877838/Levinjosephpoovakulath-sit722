name: CI/CD Pipeline for SIT722

on:
  push:
    branches:
      - testing
  pull_request:
    branches:
      - main
  workflow_dispatch:  # manual trigger

jobs:
  ci-pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up Azure CLI
        uses: azure/setup-azure-cli@v1

      - name: Log in to Azure and ACR
        run: |
          echo ${{ secrets.AZURE_CREDENTIALS }} | az ad sp create-for-rbac --role="Contributor" --scopes="/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZURE_RESOURCE_GROUP }}" > azure_credentials.json
          az login --service-principal -u $(jq -r .appId azure_credentials.json) -p $(jq -r .password azure_credentials.json) --tenant $(jq -r .tenant azure_credentials.json)
          az acr login --name ${{ secrets.ACR_NAME }}

      - name: Build Docker images and push to ACR
        run: |
          docker buildx build --file backend/product_service/Dockerfile --tag ${{ secrets.ACR_NAME }}.azurecr.io/product_service:latest --push backend/product_service
          docker buildx build --file backend/order_service/Dockerfile --tag ${{ secrets.ACR_NAME }}.azurecr.io/order_service:latest --push backend/order_service
          docker buildx build --file frontend/Dockerfile --tag ${{ secrets.ACR_NAME }}.azurecr.io/frontend:latest --push frontend

      - name: Run tests for Product Service
        run: |
          docker run --rm ${{ secrets.ACR_NAME }}.azurecr.io/product_service:latest pytest --maxfail=5 --disable-warnings -q

      - name: Run tests for Order Service
        run: |
          docker run --rm ${{ secrets.ACR_NAME }}.azurecr.io/order_service:latest pytest --maxfail=5 --disable-warnings -q

      - name: Run tests for Frontend Service
        run: |
          docker run --rm ${{ secrets.ACR_NAME }}.azurecr.io/frontend:latest pytest --maxfail=5 --disable-warnings -q

      - name: Trigger Staging Deployment
        if: success()
        run: echo "Tests passed! Triggering staging deployment."

  staging-deployment:
    needs: ci-pipeline
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Log in to Azure and AKS
        uses: azure/setup-azure-cli@v1
        run: |
          echo ${{ secrets.AZURE_CREDENTIALS }} | az ad sp create-for-rbac --role="Contributor" --scopes="/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZURE_RESOURCE_GROUP }}" > azure_credentials.json
          az login --service-principal -u $(jq -r .appId azure_credentials.json) -p $(jq -r .password azure_credentials.json) --tenant $(jq -r .tenant azure_credentials.json)
          az aks get-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Deploy to Staging Environment
        run: kubectl apply -f k8s/

      - name: Wait for Deployment
        run: |
          kubectl rollout status deployment/product-service-w08e1
          kubectl rollout status deployment/order-service-w08e1
          kubectl rollout status deployment/frontend

      - name: Run acceptance tests on Staging Environment
        run: echo "Running acceptance tests on staging..."

      - name: Clean up Staging Environment
        run: kubectl delete -f k8s/

  production-deployment:
    needs: staging-deployment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Log in to Azure and AKS for Production
        uses: azure/setup-azure-cli@v1
        run: |
          echo ${{ secrets.AZURE_CREDENTIALS }} | az ad sp create-for-rbac --role="Contributor" --scopes="/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZURE_RESOURCE_GROUP }}" > azure_credentials.json
          az login --service-principal -u $(jq -r .appId azure_credentials.json) -p $(jq -r .password azure_credentials.json) --tenant $(jq -r .tenant azure_credentials.json)
          az aks get-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Deploy to Production Environment
        run: kubectl apply -f k8s/
