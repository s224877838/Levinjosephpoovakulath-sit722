name: CI/CD Pipeline - Build, Test, Push & Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}

jobs:
  build-test-push:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d orders"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Wait for Postgres
        run: |
          until pg_isready -h localhost -U postgres -d orders; do
            echo "Waiting for postgres...";
            sleep 2;
          done

      - name: Run Backend Tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/orders
        run: |
          pytest backend/product_service/tests --disable-warnings -q
          pytest backend/order_service/tests --disable-warnings -q

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Docker login to ACR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push Backend Product Service Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ github.sha }} ./backend/product_service
          docker push ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ github.sha }}

      - name: Build and Push Backend Order Service Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ github.sha }} ./backend/order_service
          docker push ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ github.sha }}

      - name: Build and Push Frontend Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }} ./frontend
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}

      - name: Logout from Azure
        if: always()
        run: az logout
